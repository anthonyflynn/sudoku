Terminology: 
- Square = one of the 81 spaces in the Sudoku puzzle
- Box = a group of 3x3 squares


Conclusions
In order to assess which of the mystery puzzle boards corresponded to
"hard", "extremely hard" and "impossible", a test program was used to
record the time taken to solve each puzzle.  To eliminate variances in
performance (related to the number of processes being run by the CPU
at various times) the program was repeated for 5 cycles of 100 tests,
and the time averaged. A summary of the results is as follows:

Average calculation time (ms):
	    easy  medium mystery1      mystery2	  mystery3
Test 1:	    0.32  0.69	 27.63	       None	  10.51
Test 2:	    0.37  0.63	 26.66	       None	  11.31
Test 3:	    0.31  0.59	 26.32	       None	  10.98
Test 4:	    0.36  0.60	 26.49	       None	  10.34
Test 5:	    0.37  0.68	 27.99	       None	  11.15

Average:    0.35  0.64	 27.02	       None	  10.86

Additionally, a global variable was declared and incremented
each time the recursive function fill_next_square(..) was
called.  A summary of the results is as follows:

	    easy  medium mystery1      mystery2	  mystery3
Calls:	    0	  0	 49,433	       3,108	  17,175

As the program follows the same steps each time, there were no
variances in the number of function calls.  The easy and medium boards
were able to be solved through the process of deduction and
elimination alone, and therefore did not require any guessing /
backtracking.

These results suggest the following conclusions:
- Hard: mystery3
- Extremely hard: mystery1
- Impossible: mystery2

While these tests provide a good indication of puzzle difficulty,
there are cases where the results could potentially be skewed by number
positioning.  For example. in cases where the first squares to be filled
by the recursive function contain high digits, this may potentially
lead to more iterations being required before the correct solution is
reached, despite there being no difference in puzzle difficulty vs. a
puzzle with low digits in starting squares. 


Summary of program:
The program solves a Sudoku in two distinct sequential phases: (1)
deduction and (2) recursion.  

During the deduction phase, The board is modelled as a 3D array of
booleans representing row, column and possible digits (in that order).
The function calculate_valid_digits(..) assigns a value of true to
digits that can be validly placed in each square, with invalid digits
marked false. For each row, column, box and square in turn, the board
is updated to reflect digits which can only validly be placed in one
square.  This process is repeated until no more deductions are
possible, at which point the board is passed into the recursive
function fill_next_square(..) to test if it is complete or requires
guessing.

During the recursive phase, the program attempts to fill all remaining
empty squares with a valid digit.  The function get_next_square(..) is
used to find the next empty square, which is then assigned the value
of the lowest digit that can be validly placed in it.  The function
fill_next_square(..) is then called again.  This is repeated until
either (i) the board is complete (function returns true) or (ii) there
are no digits which can be validly placed in a particular square,
indicating a mistake in an earlier digit assignemnt.  In the case of
the latter, the program moves back to the most recently assigned
square and attempts to places the next highest valid digit in that
square (if there is one). If there is no valid solution, the function
returns false (when there are no more valid digits that can be place
in square [0][0]).


Efficiency vs. brute force algorithm:
As a comparison, equivalent tests were run for a purely recursive
function (with no prior digit deduction phase).  The results were as
follows:

Average calculation time (ms):
	    easy  medium mystery1      mystery2	  mystery3
Test 1:	    0.75  6.18	 583.15	       None	  138.05
Test 2:	    0.72  6.14	 504.63	       None	  139.78
Test 3:	    0.73  6.12	 515.83	       None	  145.20
Test 4:	    0.75  6.51	 523.48	       None	  140.31
Test 5:	    0.79  6.15	 517.61	       None	  138.92

Average:    0.75  6.22	 528.94	       None	  140.45

Recusive calls:
Calls:	    1153  10676	 958117	       7507	  251987


Relative efficiency vs. brute force:
Time:	    47%	  90%     95%	       NM         92%
Calls:	    NM	  NM	  95%	       NM	  93%

This suggests efficiency and speed improvements of >90% vs. a brute
force solution in most cases.
