Terminology: 
- Square = one of the 81 spaces in the Sudoku puzzle
- Box = a group of 3x3 squares


Conclusions
In order to assess which of the mystery puzzle boards corresponded to
"hard", "extremely hard" and "impossible", a test program was used to
record the time taken to solve each puzzle.  To eliminate variances in
performance (related to the number of processes being run by the CPU
at various times) the program was repeated for 5 cycles of 100 tests,
and the time averaged. A summary of the results is as follows:

Average calculation time (ms):
	    easy  medium mystery1      mystery2	  mystery3
Test 1:	    0.89  1.12	 48.34	       None	  18.23
Test 2:	    0.88  1.21	 46.30	       None	  19.49
Test 3:	    0.91  1.39	 47.89	       None	  19.86
Test 4:	    0.91  1.65	 47.85	       None	  21.35
Test 5:	    0.92  1.01	 46.05	       None	  23.56

Average:    0.90  1.28	 47.29	       None	  20.51

Additionally, a global variable was declared and incremented
each time the recursive function fill_next_square(..) was
called.  A summary of the results is as follows:

	    easy  medium mystery1      mystery2	  mystery3
Calls:	    0	  0	 49,433	       3,108	  17,175

As the program follows the same steps each time, there were no
variances in the number of function calls.  The easy and medium boards were able to be
solved through the process of deduction and elimination along, and therefore
did not require any guessing / backtracking.

This suggests the following conclusions:
- Hard: mystery3
- Extremely hard: mystery1
- Impossible: mystery2

While these tests provide a good indication of puzzle difficulty,
there are cases where the results could be potentially skewed by number
positioning.  For example. in cases where the first digits filled
through recursion are high, this may potentially lead to more
iterations being required before the correct solution is reached,
despite there being no difference in puzzle difficulty.


Summary of program:
This program solves a Sudoku in two distinct sequential phases: (1) deduction and (2)
recursion.  During the deduction phase, The board is modelled as a 3D array of booleans
representing row, column and possible digits (in that order).  The function
calculate_valid_digits(..) assigns a value of true to digits that can
be validly placed in each square, with invalid digits marked false.
For each row, column, box and square in turn, the board is updated to reflect
digits which can only validly be placed in one square.  This process
is repeated until no more deductions are possible, at which point the
board is passed into the recursive function fill_next_square(..) to
test if it is complete or requires guessing.

During the recursive phase, the program attempts to fill all remaining
empty squares with a valid digit.  The function get_next_square(..) is used
to find the next empty square, which is then assigned the value
of the lowest digit that can be validly placed in it.  The function
fill_next_square(..) is then called again.  This is repeated until
either (i) the board is complete (function returns true) or (ii) there
are no digits which can be validly placed in a particular square,
indicating a mistake in an earlier digit assignemnt.  In the case of
the latter, the program moves back to the most recently assigned
square and attempts to places the next highest valid digit in that
square (if there is one). If there is no valid solution, the function
returns false (when there are no more valid digits that can be placed in square [0][0]).


Efficiency vs. brute force algorithm:
As a comparison, equivalent tests were run for a purely recursive
function (with no prior digit deduction).  The results are as follows:

Average calculation time (ms):
	    easy  medium mystery1      mystery2	  mystery3
Test 1:	    2.23  15.73	 974.06	       None	  274.38
Test 2:	    2.17  12.23	 974.62	       None	  272.14
Test 3:	    2.36  13.64	 971.72	       None	  275.73
Test 4:	    2.51  11.85	 966.67	       None	  270.47
Test 5:	    2.48  12.25	 973.34	       None	  272.51

Average:    2.35  13.14	 972.08	       None	  273.05

Recusive calls:
Calls:	    1153  10676	 958117	       7507	  251987


Relative efficiency vs. brute force:
Time:	    62%	  90%     95%	       N/M        92%
Calls:	    NM	  NM	  95%	       NM	  93%

This indicates efficiency and speed improvements of >90% vs. a brute
force solution.
